c
continue
found_team
found_team.win
found_team
team["win"].to_i
team["win"]
team
c
team["teamId"].to_i
team["teamId"]
team
exit
Standing.all.length
Standing.first
Standing.find_by(teamId: 1)
Standing.find_by(teamId: 26)
Standing.find_by(teamId: team["teamId"])
Standing.all
STanding.all
Standing.find_by(teamId: team["teamId"])
Standing.find_by(teamId: team["teamId"]
Standing.find_by(teamId: team["teamId")
found_team
team
exit
team.nickname
team.teamName
team.shortName
team
c
exit
price_jumps
allPlayers.sort_by {|player| player[:change]}
allPlayers.sort_by {|change, price| price}
allPlayers.change.sort
allPlayers.sort {|a, b| a["change"] > b["change"]}
allPlayers.sort {|player| player["change"]}
allPlayers.sort {|player| players["change"]}
allPlayers.map {|p| p[:change]}
allPlayers
allPlayers.map {|p| p.change}
allPlayers.each {|p| p.change}
continue
player
c
player
c
player
c
player
c
player
player["leagues"]
c
player["leagues"]
player["leagues]
player["leagues]"
player
exit
Player.find_by(playerId: 2110)
player_stats
player
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
c
player.player_average
player
c
player.player_average
player
c
player
c
player
c
x
player.player_average
player_stats
player
c
player_stats
player
c
player_stats
player.player_average
player
exit
d
continue
player12
exit
user_params
params
c
user_params
params
c
UserPlayer.where(user_id: 1)
user_players
c
UserPlayer.where(user_id: 1)
c
user_players
request.headers["user"]
c
request.headers["user"]
c
request.headers["user"]
c
request.headers["user"]
exit
found_user
found_user.update(account_balance: found_useraccount_balance + 0.01)
                        )
                            account_balance: account_balance + 0.01
found_user.update(
found_user
c
found_user
c
continue
users.each {|u| user = User.find_by(id: u.user_id), user.update(account_balance: account_balance + 1)}
users.each {|u| user = User.find_by(id: 1), user.update(account_balance: account_balance + 1) }
users.each {|u| user = User.find_by(id: 1); user.update(account_balance: account_balance + 1) }
users.each {|u| user = User.find_by(id: 1); user.update(account_balance: account_balance + 1: }
users.each {|u| user = User.find_by(id: 1); user.update(account_balance: account_balance + 1 }
users.each {|u| user = User.find_by(id: 1); user.update(account_balance: account_balance + 1; }
users.each {|u| user = User.find_by(id: 1), user.update(account_balance: account_balance + 1; }
users.each {|u| user = User.find_by(id: 1), user.update(account_balance: account_balance + 1}
users.each {|u| user = User.find_by(id: 1), return user }
users.each {|u| user = User.find_by(id: 1), user.account_balance }
users.each {|u| user = User.find_by(id: 1); user.account_balance}
users.map {|u| user = User.find_by(id: 1)}
users.each {|u| user = User.find_by(id: 1)}
users.each {|u| user = User.find_by(id: 1); return user }
users.each {|u| user = User.find_by(id: 1); user}
users.each do
users.each dp |u|
users.each {|u| user = User.find_by(id: 1
users.each {|u| user = User.find_by(id: 1)}
users.each {|u| user = User.find_by(id: 1)
users
users.each {|u| u.account_balance}
users
player
c
player
c
player.player_average.points * 0.50
player.player_average.points
player.player_averages.points
player_stats.points
player_stats
player
player_stats.points <= player.player_average.points
player_stats.points <= (player.player_average.points * 0.5 )
player_stats.points <= player.player_average.points
player_stats.points <= (player.player_average.points * 0.5 )
player.player_average.points * 0.5
player.player_average.points
player_stats.points
player_stats
users
player
c
d
continue
players.map {|p| p.player_average.points}
players
exit
players.map {|p| p.points }
players
players.map {|p| p.player_average }
players.map {|p| p.player_average.points}
players.map {|p| p.player_averages.points}
players.all.map {|p| p.player_averages.points}
players.all.map {|p| p.player_average.points}
players
exit
continue
player.player_average.points === 'NaN'
player.player_average.points === NaN
player.player_average.points == NaN
player.player_average.points
player.player_average_points === NaN
player.statistics
player.statistic
player
Player.statistiplayer
Player.statistic
Player.statistics
player.player_average
player.player_average != nil
player.player_average === nil
player
c
player.player_average != nil
player.player_average === nil
NaN === true
player.player_average === true
player.player_average
player.player_average.points === true
player.player_average.points
player
c
player.player_average.points === true
player.player_average.points
player
exit
new_user
new_user = User.new(user_params)
params
